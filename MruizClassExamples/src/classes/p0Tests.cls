public class p0Tests {
    /*
System.assertEquals(1, P0.fibonacci(1));  
System.assertEquals(1, P0.fibonacci(2));  
System.assertEquals(2, P0.fibonacci(3));  
System.assertEquals(89, P0.fibonacci(11));  
System.assertEquals(6765, P0.fibonacci(20));  
System.assertEquals(196418, P0.fibonacci(27));  

List<Integer> unsortedL1 = new List<Integer> {2,4,5,1,3,1};
List<Integer> sortedL1 = new List<Integer> {1,1,2,3,4,5};
    List<Integer> returnedL1 = P0.sortArray(unsortedL1);
    for(Integer i = 0; i < unsortedL1.size(); i++) {
        System.assertEquals(sortedL1[i], returnedL1[i]);
    }
     
List<Integer> unsortedL2 = new List<Integer> {2,7,7,1,9,13,26,13,14,17,15,0,1,0,19};
List<Integer> sortedL2 = new List<Integer> {0,0,1,1,2,7,7,9,13,13,14,15,17,19,26};
    List<Integer> returnedL2 = P0.sortArray(unsortedL2);
    for(Integer i = 0; i < unsortedL2.size(); i++) {
        System.assertEquals(sortedL2[i], returnedL2[i]);
    }

System.assertEquals(1, P0.factorial(0));
System.assertEquals(1, P0.factorial(1));
System.assertEquals(120, P0.factorial(5));
System.assertEquals(720, P0.factorial(6));
System.assertEquals(5040, P0.factorial(7));

List<Integer> unrotatedL1 = new List<Integer> {4,7,9,13,2,1};
List<Integer> rotatedL1 = new List<Integer> {2,1,4,7,9,13};
    List<Integer> returnedRotatedL1 = P0.rotateLeft(unrotatedL1, 16);
    for(Integer i = 0; i < unrotatedL1.size(); i++) {
        System.assertEquals(rotatedL1[i], returnedRotatedL1[i]);
    }

List<Integer> unrotatedL2 = new List<Integer> {3,5,8,3,5,7,90};
List<Integer> rotatedL2 = new List<Integer> {3,5,8,3,5,7,90};
    List<Integer> returnedRotatedL2 = P0.rotateLeft(unrotatedL2, 49);
    for(Integer i = 0; i < unrotatedL2.size(); i++) {
        System.assertEquals(rotatedL2[i], returnedRotatedL2[i]);
    }





*/







}