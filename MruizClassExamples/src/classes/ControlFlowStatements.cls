public class ControlFlowStatements {
   /*
    // If statement
    
    if (false) {
        System.debug('If statement is true');
    } else {
        System.debug('If statement is false');
    }
    
    if (4 < 5) {
        System.debug('4 is less than 5');
    } else {
        System.debug('Math is a lie');
    }
    
    Integer testScore = 60;
    
    // If-else-if
    if (testScore >= 90) {
        System.debug('A');
    } else if (testScore >= 80) {
        System.debug('B');
    } else if (testScore >= 70) {
        System.debug('C');
    } else if (testScore >= 65) {
        System.debug('D');
    } else {
        System.debug('F');
    }
    
    Integer testScore = 90;
    
    // If-else-if
    if (testScore >= 90) {
        System.debug('A');
    } 
    if (testScore >= 80) {
        System.debug('B');
    }
    if (testScore >= 70) {
        System.debug('C');
    }
    if (testScore >= 65) {
        System.debug('D');
    } 
    
    if (testScore < 65) {
        System.debug('F');
    }
    
    // Switch Statement
    /*
Apex switch statement expressions can be one of the following types.
- Integer
- Long
- sObject
- String
- Enum
*/
    /*
    Integer i = 1000;
    
    switch on i {
        when 0 {
            System.debug('0');
        }
        when 1 {
            System.debug('1');
        }
        when 2 {
            System.debug('2');
        }
        when else {
            System.debug('Some other number');
        }
    }
    
    Integer i = 2;
    
    switch on i {
        when 0, 3, 6 {
            System.debug('When block 0 and 3 and 6');
        }
        when 1, 4, 7 {
            System.debug('When block 1 and 4 and 7');
        }
        when 9, 100, 2 {
            System.debug('When block 9 and 100 and 2');
        }
        when else {
            System.debug('Some other number');
        }
    }
    
    Season s = Season.SUMMER;
    
    switch on s {
        when WINTER {
            System.debug('It\'s Cold');
        }
        when SUMMER, SPRING {
            System.debug('Get ya sublock');
        }
        when else {
            System.debug('Leaves are fallin');
        }
    }
    
    sObject a = new Account(Name='Matt');
    sObject c = new Contact(LastName='Ruiz');
    switch on c {
        when Account a {
            System.debug('a:' + a);
        }
        when Contact c {
            System.debug('c:' + c);
        }
        when else {
            System.debug('other sobjects');
        }
    }
    
// Do-While Loops

// The Apex do-while loop repeatedly executes a block of code as long as a particular Boolean condition
// remains true.
// The Apex do-while loop does not check the Boolean condition statement until after the first loop
// is executed. Consequently, the code block always runs at least once. 
Integer count = 1;

do {
    System.debug('count: ' + count);
    count++;
} while (count > 11);


// While Loops
// The Apex do-while loop repeatedly executes a block of code as long as a particular Boolean condition
// remains true.
// Unlike do-while, the while loop checks the Boolean condition statement before the first loop 
// is executed. Consequently, it is possible for the code block to never execute.
Integer count = 1;

while (count > 11) {
    System.debug('count: ' + count);
    count++;
}

// For Loops
for (Integer i = 0; i < 10; i++) {
    System.debug('i: ' + i);
}

for (Integer i = 0; i < 10; i+=2) {
    System.debug('i: ' + i);
}

for (Integer i = 10; i > 0; i--) {
    System.debug('i: ' + i);
}

for (Integer i = 10; i > 0; i-=6) {
    System.debug('i: ' + i);
}




 */   
    
}